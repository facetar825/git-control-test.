
1. Что делает команда `git init`?
Это команда инициализирует новый Git-репозиторий в выбранной папке, создавая скрытую папку `.git`


2. Для чего нужен файл `.gitignore`?
Файл `.gitignore` содержит список файлов и папок, которые Git должен игнорировать, не добавлять в репозиторий. 

3. В чём разница между `git add` и `git commit`?
`git add` — добавляет изменения файлов в индекс (staging area), готовя их к коммиту. `git commit` — сохраняет все изменения из индекса в историю репозитория

4. Что происходит при выполнении `git merge`?
Команда объединяет изменения из одной ветки в текущую, связывая их в единую историю.

5. Чем отличаются `git reset --soft` и `git revert`?
`git reset --soft` откатывает состояние репозитория к определённому коммиту, сохраняя изменения в индексе и рабочей директории.
 `git revert` создаёт новый коммит, отменяющий изменения указанного коммита без удаления истории.

6. Что такое ветка в Git и зачем она нужна?
Ветка — это параллельная линия разработки, 
позволяющая работать над разными функциями или исправлениями изолированно

7. Как можно отменить последние изменения, если коммит ещё не сделан?
можно использовать `git restore <имя_файла>` или `git checkout -- <имя_файла>`, чтобы вернуть их состояние к последнему коммиту

8. Что делает команда `git push` и зачем её выполняют после коммита?
`git push` отправляет локальные коммиты в удалённый репозиторий (например, на GitHub) создавая резервную копию.

9. Что произойдёт, если сделать изменения в одной и той же строке в разных ветках и потом объединить их?
Git обнаружит конфликт слияния, потому что не сможет автоматически выбрать одну из версий строки.

10. Что нужно сделать, чтобы восстановить случайно удалённый файл?
его можно восстановить командой `git restore <имя_файла>`. 




